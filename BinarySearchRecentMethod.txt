/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/
import java.util.*;
public class Main
{
	public static void main(String[] args) {

	//Binary Search
	
	int a[]={1,2,3,7,8,9,10};

  int low = 0;
  int high = a.length - 1 ;
  int key = 10;
	
  
	System.out.println(bs( a, low,high,key));
	}
	
	static int bs( int a[] , int low , int high, int key)
	{
	    
	    int result = 0;
	    
	    while( low<=high)
	    {
	        int mid = (high+low)/2;
	        
	        if( a[mid] == key)
	          { System.out.println(mid+1);
	             result = mid+1;
	          break;}
	           
	           else if( a[mid] < key)
	              low = mid +1;
	             else if ( key < a[mid])
	               high = mid -1;
	    }
	    
	    
	    return result ;
	}
}

// RECURSIVEMETHOD FOR BINARY SEARCH JUST ADD RETURN IN EACH COMPARISON AND ALSO IN THE END AS WELL

/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/
import java.util.*;
public class Main
{
	public static void main(String[] args) {

	//Binary Search
	
	int a[]={1,2,3,7,8,9,10};

  int low = 0;
  int high = a.length - 1 ;
  int key = 10;
	
  
	System.out.println(bs( a, low,high,key));
	}
	
	static int bs( int a[] , int low , int high, int key)
	{
	    int pos=0;
	    
	    int mid = (high+low)/2;
	   
	    if( a[mid] == key )
	      return  pos= mid+1;
	   else if(key > a[mid])  
	      return  bs(a,mid+1 , high , key);
	       
	   else if( key < a[mid])   
	       return bs(a, low, mid - 1, key);
	    
	    
	return 0;
	}
}

